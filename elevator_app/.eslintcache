[{"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/index.js":"1","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/reportWebVitals.js":"2","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/App.js":"3","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/globalstate/atom.js":"4","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/pages/HomePage.js":"5","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Button.js":"6","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Floor.js":"7","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Elevator.js":"8"},{"size":500,"mtime":1611190433400,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1611190433400,"results":"11","hashOfConfig":"10"},{"size":389,"mtime":1611192166557,"results":"12","hashOfConfig":"10"},{"size":132,"mtime":1611192446653,"results":"13","hashOfConfig":"10"},{"size":1002,"mtime":1611197291525,"results":"14","hashOfConfig":"10"},{"size":542,"mtime":1611197229268,"results":"15","hashOfConfig":"10"},{"size":446,"mtime":1611197023036,"results":"16","hashOfConfig":"10"},{"size":889,"mtime":1611197922432,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"hkw8oy",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/index.js",[],["38","39"],"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/reportWebVitals.js",[],"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/App.js",[],"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/globalstate/atom.js",[],"/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/pages/HomePage.js",["40","41"],"import React from 'react'\nimport { useRecoilState } from \"recoil\";\nimport { createGlobalState } from \"../globalstate/atom\"\nimport Button from \"../components/Button\"\nimport Floor from \"../components/Floor\"\nimport Elevator from \"../components/Elevator\"\n\nconst HomePage = () => {\n\n  const [currentFloor, setCurrentFloor] = useRecoilState(createGlobalState);\n\n  let floors = [5, 4, 3, 2, 1]\n\n  return (\n    <div>\n        <h1>Elevator App</h1>\n      <div style={{display: 'flex', justifyContent: 'space-evenly'}}>\n        <div style={{marginTop: '200px'}}>\n          {\n            floors.map((floor, index) => (\n              <Button key={index }floor={floor} index={index}/>\n            ))\n          }\n        </div>\n        <div>\n          {\n            floors.map((floor, index) => (\n              <Floor key={index} floor={floor} index={index} />\n            ))\n          }\n        </div>\n        <div>\n          <Elevator />\n        </div>\n      </div>\n      \n    </div>\n  )\n}\n\nexport default HomePage\n","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Button.js",["42"],"import React from 'react'\nimport { useRecoilState } from \"recoil\";\nimport { createGlobalState } from \"../globalstate/atom\"\n\nconst Button = ({ floor, index}) => {\n\n  const [currentFloor, setCurrentFloor] = useRecoilState(createGlobalState);\n\n  const handleClick = () => {\n    setCurrentFloor((prevState) => {\n      return {\n        ...prevState,\n        floor: (prevState = floor)\n      }\n    })\n  }\n\n  return (\n    <div>\n      <button onClick={handleClick} style={{marginTop: '15px'}}>{floor}</button>\n    </div>\n  )\n}\n\nexport default Button\n","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Floor.js",["43","44"],"import React from 'react'\nimport { useRecoilState } from \"recoil\";\nimport { createGlobalState } from \"../globalstate/atom\"\n\nconst Floor = ({ floor, index }) => {\n\n  const [currentFloor, setCurrentFloor] = useRecoilState(createGlobalState);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', marginTop: '100px', alignContent: 'flex-end' }}>\n      <div>\n        Floor {floor}\n      </div>\n    </div>\n  )\n}\n\nexport default Floor\n","/Users/mrod/codeplatoon/challenges/20spokes_Challenge/elevator_app/src/components/Elevator.js",["45"],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":10,"column":10,"nodeType":"52","messageId":"53","endLine":10,"endColumn":22},{"ruleId":"50","severity":1,"message":"54","line":10,"column":24,"nodeType":"52","messageId":"53","endLine":10,"endColumn":39},{"ruleId":"50","severity":1,"message":"51","line":7,"column":10,"nodeType":"52","messageId":"53","endLine":7,"endColumn":22},{"ruleId":"50","severity":1,"message":"51","line":7,"column":10,"nodeType":"52","messageId":"53","endLine":7,"endColumn":22},{"ruleId":"50","severity":1,"message":"54","line":7,"column":24,"nodeType":"52","messageId":"53","endLine":7,"endColumn":39},{"ruleId":"50","severity":1,"message":"54","line":7,"column":24,"nodeType":"52","messageId":"53","endLine":7,"endColumn":39},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'currentFloor' is assigned a value but never used.","Identifier","unusedVar","'setCurrentFloor' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]